devtools::build()
devtools::install()
rm(list=ls())
library(wfdb.R)
library(cardiac.output)
data=rdsamp("D:/Datasets/mimic3wdb-matched/p00/p000020/p000020-2183-04-28-17-47")
abp=data[,3]
abp = data[150000:152000,3]
onsets=wabp(abp)
onsets
onset.times = wabp(abp)
features = abpfeature(abp,onset.times)
t = (1:length(abp)-1)/125
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
cardiac.output = liljestrand.estimate.co.waveform(abp, 6000)
rownames(features)
colnames(features)
devtools::build()
devtools::install()
library(cardiac.output)
rm(list=ls())
library(wfdb.R)
library(cardiac.output)
data=rdsamp("D:/Datasets/mimic3wdb-matched/p00/p000020/p000020-2183-04-28-17-47")
abp = data[150000:152000,3]
onset.times = wabp(abp)
features = abpfeature(abp,onset.times)
t = (1:length(abp)-1)/125
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
cardiac.output = liljestrand.estimate.co.waveform(abp, 6000)
library(ggplot2)
rm(list=ls())
library(wfdb.R)
library(cardiac.output)
data=rdsamp("D:/Datasets/mimic3wdb-matched/p00/p000020/p000020-2183-04-28-17-47")
abp = data[150000:152000,3]
onset.times = wabp(abp)
features = abpfeature(abp,onset.times)
t = (1:length(abp)-1)/125
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
cardiac.output = liljestrand.estimate.co.waveform(abp, 6000)
features$time.systole
onset.times = wabp(abp)
features = abpfeature(abp,onset.times)
t = (1:length(abp)-1)/125
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
cardiac.output = liljestrand.estimate.co.waveform(abp, 6000)
qplot(t,abp,geom='line')
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue'))
features$time.systole/125
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange'))
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red'))
features$end.of.systole.rr
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange'))
features$time.systole
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$endof.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
length(features$time.systole)
length(features$end.of.systole.rr)
qplot(t,abp,geom='line') + geom_vline(aes(xintercept=onset.times/125,color='blue')) +
geom_vline(aes(xintercept=features$time.systole/125,color='orange')) +
geom_vline(aes(xintercept=features$end.of.systole.rr/125,color='red')) +
scale_color_manual(name='Onset Markers', guide='legend',values=c('blue','orange','red'),
labels=c('Beat Onset','Time of Systole','End of Systole'))
o=wabp(data[1:1000,3])
abp=data[1:1000,3]
plot(abp)
offset = 1600;
scale = 20;
Araw = abp*scale-offset;
# LPF
A = signal::filter(c(1, 0, 0, 0, 0, -2, 0, 0, 0, 0, 1), c(1, -2, 1), Araw)/24 + 30
A = (A[-(1:3)] + offset)/scale
# Slope-sum function
dypos = A[-1] - A[-length(A)]
dypos[dypos<0] = 0
ssf = c(0, 0, convolve(rep(1,16),rev(dypos),type='open'))
# Decision rule
avg0 = sum(ssf[1:1000])/1000
Threshold0 = 3*avg0
# Ignoring "learning period" for now
lockout = 0
timer = 0
z = rep(0,100000)
counter = 0
t=50
lockout = lockout - 1
timer = timer + 1
length(ssf)
lockout < 1 && ssf[t]>avg0+5
lockout<1
ssf[t]
avg0
avg0
ssf
sum(ssf[1:1000])
sum(is.na(ssf[1:1000]))
# Decision rule
avg0 = sum(na.omit(ssf[1:1000]))/1000
Threshold0 = 3*avg0
avg0
devtools::build()
devtools::install()
rm(list=ls())
library(wfdb.R)
library(cardiac.output)
library(ggplot2)
data=rdsamp("D:/Datasets/mimic3wdb-matched/p00/p000020/p000020-2183-04-28-17-47")
abp = data[150000:152000,3]
onset.times = wabp(abp)
features = abpfeature(abp,onset.times)
t = (1:length(abp)-1)/125
abp=data[1:1000,3]
o=wabp(abp)
o
source('~/cardiac.output.R/R/abpfeature.R')
c(1,2,3)*c(1,2,3)
rm(list=ls())
source('~/cardiac.output.R/R/abpfeature.R')
devtools::build()
devtools::build()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
#' ABPFEATURE
#'
#' ABP waveform feature extractor.
#' Original MATLAB code by James Sun on Nov 19, 2005.
#' Ported to R by Ran Liu on June 24, 2018.
#'
#' @param abp Arterial blood pressure waveform
#' @param OnsetTimes Onset times (in indices)
#'
#' @return List of ABP features:
#' 1. Time of systole (samples)
#' 2. Systolic BP (mmHg)
#' 3. Time of diastole (samples)
#' 4. Diastolic BP (mmHg)
#' 5. Pulse Pressure (mmHg)
#' 6. Mean ABP (mmHg)
#' 7. Beat Period (samples)
#' 8. mean_dyneg TODO
#' 9. End of systole time, 0.3*sqrt(RR) method
#' 10. Area under systole, 0.3*sqrt(RR) method TODO
#' 11. End of systole time, 1st min-slope method TODO
#' 12. Area under systole, 1st min-slope method TODO
#' @export
abpfeature = function(abp, OnsetTimes) {
Window = 40
OT = OnsetTimes[-length(OnsetTimes)]
BeatQty = length(OT)
MinDomain = array(rep(0,BeatQty*Window),dim=c(BeatQty,Window))
MaxDomain = array(rep(0,BeatQty*Window),dim=c(BeatQty,Window))
for (i in 1:Window) {
MinDomain[,i] = OT-i+1
MaxDomain[,i] = OT+i-1
}
MinDomain[MinDomain<1] = 1
MaxDomain[MaxDomain<1] = 1
P_dias=apply(array(abp[MinDomain],dim=c(BeatQty,Window)),1,min)
Dindex=apply(array(abp[MinDomain],dim=c(BeatQty,Window)),1,which.min)
P_sys=apply(array(abp[MaxDomain],dim=c(BeatQty,Window)),1,max)
Sindex=apply(array(abp[MaxDomain],dim=c(BeatQty,Window)),1,which.max)
DiasTime = sapply(1:BeatQty, function(x) MinDomain[x,Dindex[x]])
SysTime = sapply(1:BeatQty, function(x) MaxDomain[x,Sindex[x]])
PP = P_sys - P_dias
BeatPeriod = OnsetTimes[-1]-OnsetTimes[-length(OnsetTimes)]
dyneg = abp[-1]-abp[-length(abp)]
dyneg[dyneg>0] = 0
MAP = sapply(1:BeatQty, function(x) mean(abp[OnsetTimes[x]:OnsetTimes[x+1]]))
mean_dyneg = sapply(1:BeatQty, function(x) {
dyneg_interval = dyneg[OnsetTimes[x]:OnsetTimes[x+1]]
if (!any(dyneg_interval != 0)) {
return(0)
}
dyneg_interval = dyneg_interval[dyneg_interval!=0]
return(mean(dyneg_interval))
})
RR = BeatPeriod/125
sys_duration = 0.3*sqrt(RR)
EndOfSys1 = round(OT + sys_duration*125)
SysArea1 = localfun.area(abp,OT,EndOfSys1,P_dias)
SlopeWindow = 35
ST = EndOfSys1
if (ST[length(ST)] > (length(abp)-35)) {
ST[length(ST)] = length(abp)-35
}
return(list(time.systole=SysTime,systolic.bp=P_sys,time.diastole=DiasTime,diastolic.bp=P_dias,
pulse.pressure=PP, mean.bp=MAP, beat.period=BeatPeriod, mean.dyneg=mean_dyneg, end.of.systole.rr=EndOfSys1,
systole.area.rr=SysArea1))
}
localfun.area = function(abp,onset,EndSys,P_dias) {
BeatQty = length(onset)
SysArea = rep(0,BeatQty)
for (i in 1:BeatQty) {
SysArea[i] = sum(abp[onset[i]:EndSys[i]]);
}
SysPeriod = EndSys - onset
SysArea = (SysArea - P_dias * SysPeriod)/125
}
features = abpfeature(y,onsets)
rm(list=ls())
library(wfdb.R)
library(cardiac.output)
library(ggplot2)
data = readRDS("patient_20.rds")
indices = 150000:152000;
t = (1:length(indices))/125
y = data[indices,3]
onsets = wabp(y)
qplot(t,y,geom="line")+geom_vline(xintercept=onsets/125)
features = abpfeature(y,onsets)
Slope = lapply(1:dim(SlopeDomain)[2], function(x) {
current.signal = abp[SlopeDomain[,x]]
return(current.signal[-1]-current.signal[-length(current.signal)])
})
Slope = do.call(cbind.Slope)
abs(Slope)
which(c(1,0,1))
which(c(1,0,1)==1)
index
5 < Infty
5 < Inf
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::clean_source()
devtools::build()
roxygen2::namespace_roclet()
devtools::document()
devtools::build()
devtools::install()
